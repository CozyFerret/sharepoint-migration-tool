"""
Main window for the SharePoint Migration Tool.
This file contains the primary UI class for the application.
"""

import os
import sys
import logging
from PyQt5.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, 
    QLabel, QFileDialog, QTabWidget, QProgressBar, QMessageBox,
    QLineEdit, QComboBox, QCheckBox, QGroupBox, QRadioButton,
    QTableView, QSplitter, QTextEdit
)
from PyQt5.QtCore import Qt, pyqtSlot
from PyQt5.QtGui import QIcon, QFont

# Import core components
try:
    from core.data_processor import DataProcessor
    logger = logging.getLogger('sharepoint_migration_tool')
    logger.info("Successfully imported DataProcessor")
except ImportError as e:
    logger = logging.getLogger('sharepoint_migration_tool')
    logger.error(f"Error importing DataProcessor: {e}")
    
    # Create a simple dialog to show the error
    error_dialog = QMessageBox()
    error_dialog.setIcon(QMessageBox.Critical)
    error_dialog.setText("Import Error")
    error_dialog.setInformativeText(f"Error importing core components: {e}")
    error_dialog.setWindowTitle("Error")
    error_dialog.exec_()

class MainWindow(QMainWindow):
    """Main window for the SharePoint Migration Tool"""
    
    def __init__(self):
        """Initialize the main window"""
        super().__init__()
        try:
            # Initialize the data processor
            self.data_processor = DataProcessor()
            
            # Initialize UI
            self.init_ui()
            
            # Set window properties
            self.setWindowTitle("SharePoint Migration Tool")
            self.setGeometry(100, 100, 1200, 800)
            
            logger.info("Main window initialized successfully")
        except Exception as e:
            logger.error(f"Error initializing main window: {e}")
            # Display error message
            QMessageBox.critical(self, "Initialization Error", 
                                f"Failed to initialize application: {str(e)}")
    
    def init_ui(self):
        """Initialize the user interface"""
        try:
            # Create central widget and layout
            central_widget = QWidget()
            main_layout = QVBoxLayout(central_widget)
            
            # Add a log text edit at the bottom for debugging
            self.log_text = QTextEdit()
            self.log_text.setReadOnly(True)
            self.log_text.setMaximumHeight(150)
            self.log_text.setPlaceholderText("Application log will appear here...")
            
            # Setup custom handler for the logger
            class QTextEditLogger(logging.Handler):
                def __init__(self, text_edit):
                    super().__init__()
                    self.text_edit = text_edit
                    self.text_edit.ensureCursorVisible()
                    
                def emit(self, record):
                    msg = self.format(record)
                    self.text_edit.append(msg)
                    
            # Add custom handler
            log_handler = QTextEditLogger(self.log_text)
            log_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s: %(message)s'))
            logger.addHandler(log_handler)
            
            # Create tab widget for different sections
            self.tab_widget = QTabWidget()
            
            # Create tabs
            self.scan_tab = self.create_scan_tab()
            self.analyze_tab = self.create_analyze_tab()
            self.clean_tab = self.create_clean_tab()
            self.settings_tab = self.create_settings_tab()
            
            # Add tabs to widget
            self.tab_widget.addTab(self.scan_tab, "Scan")
            self.tab_widget.addTab(self.analyze_tab, "Analyze")
            self.tab_widget.addTab(self.clean_tab, "Clean & Migrate")
            self.tab_widget.addTab(self.settings_tab, "Settings")
            
            # Add tab widget to main layout
            main_layout.addWidget(self.tab_widget)
            
            # Add log text to main layout
            main_layout.addWidget(QLabel("Application Log:"))
            main_layout.addWidget(self.log_text)
            
            # Set central widget
            self.setCentralWidget(central_widget)
            
            logger.info("UI initialized successfully")
        except Exception as e:
            logger.error(f"Error initializing UI: {e}")
            # Display error message
            QMessageBox.critical(self, "UI Initialization Error", 
                                f"Failed to initialize UI: {str(e)}")
    
    def create_scan_tab(self):
        """Create the scan tab"""
        try:
            # Create tab widget
            tab = QWidget()
            layout = QVBoxLayout(tab)
            
            # Source folder selection
            folder_layout = QHBoxLayout()
            folder_layout.addWidget(QLabel("Source Folder:"))
            
            self.source_folder_edit = QLineEdit()
            self.source_folder_edit.setReadOnly(True)
            folder_layout.addWidget(self.source_folder_edit)
            
            self.browse_button = QPushButton("Browse...")
            self.browse_button.clicked.connect(self.browse_source_folder)
            folder_layout.addWidget(self.browse_button)
            
            layout.addLayout(folder_layout)
            
            # Scan options group
            scan_options = QGroupBox("Scan Options")
            scan_options_layout = QVBoxLayout(scan_options)
            
            self.recursive_checkbox = QCheckBox("Scan subfolders recursively")
            self.recursive_checkbox.setChecked(True)
            scan_options_layout.addWidget(self.recursive_checkbox)
            
            self.hidden_checkbox = QCheckBox("Include hidden files")
            scan_options_layout.addWidget(self.hidden_checkbox)
            
            layout.addWidget(scan_options)
            
            # Scan controls
            controls_layout = QHBoxLayout()
            
            self.scan_button = QPushButton("Scan Files")
            self.scan_button.setEnabled(False)
            self.scan_button.clicked.connect(self.start_scan)
            controls_layout.addWidget(self.scan_button)
            
            self.stop_button = QPushButton("Stop Scan")
            self.stop_button.setEnabled(False)
            self.stop_button.clicked.connect(self.stop_scan)
            controls_layout.addWidget(self.stop_button)
            
            layout.addLayout(controls_layout)
            
            # Progress bar
            progress_layout = QVBoxLayout()
            progress_layout.addWidget(QLabel("Scan Progress:"))
            
            self.scan_progress = QProgressBar()
            progress_layout.addWidget(self.scan_progress)
            
            layout.addLayout(progress_layout)
            
            # Status label
            self.scan_status = QLabel("Ready to scan")
            layout.addWidget(self.scan_status)
            
            # Add spacer
            layout.addStretch()
            
            return tab
        except Exception as e:
            logger.error(f"Error creating scan tab: {e}")
            # Create an error tab
            error_tab = QWidget()
            error_layout = QVBoxLayout(error_tab)
            error_layout.addWidget(QLabel(f"Error creating scan tab: {str(e)}"))
            return error_tab
    
    def create_analyze_tab(self):
        """Create the analyze tab (placeholder)"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.addWidget(QLabel("Analysis tab content will go here"))
        return tab
    
    def create_clean_tab(self):
        """Create the clean tab (placeholder)"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.addWidget(QLabel("Cleaning and migration tab content will go here"))
        return tab
    
    def create_settings_tab(self):
        """Create the settings tab (placeholder)"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.addWidget(QLabel("Settings tab content will go here"))
        return tab
    
    def browse_source_folder(self):
        """Open a file dialog to select source folder"""
        try:
            logger.info("Opening folder selection dialog")
            
            folder = QFileDialog.getExistingDirectory(self, "Select Source Folder")
            
            if folder:
                logger.info(f"Selected folder: {folder}")
                self.source_folder_edit.setText(folder)
                self.scan_button.setEnabled(True)
                self.scan_status.setText(f"Ready to scan: {folder}")
            else:
                logger.info("Folder selection cancelled")
        except Exception as e:
            logger.error(f"Error browsing for folder: {e}")
            QMessageBox.critical(self, "Folder Selection Error", 
                               f"Error selecting folder: {str(e)}")
    
    def start_scan(self):
        """Start the scanning process"""
        try:
            source_folder = self.source_folder_edit.text()
            
            if not source_folder or not os.path.exists(source_folder):
                logger.error(f"Invalid source folder: {source_folder}")
                QMessageBox.warning(self, "Invalid Folder", 
                                   "Please select a valid source folder")
                return
            
            logger.info(f"Starting scan of folder: {source_folder}")
            
            # Update UI
            self.scan_status.setText(f"Scanning: {source_folder}")
            self.scan_button.setEnabled(False)
            self.stop_button.setEnabled(True)
            self.browse_button.setEnabled(False)
            self.scan_progress.setValue(0)
            
            # Prepare scan options
            scan_options = {
                'recursive': self.recursive_checkbox.isChecked(),
                'include_hidden': self.hidden_checkbox.isChecked()
            }
            
            # Prepare callbacks
            callbacks = {
                'progress': self.update_scan_progress,
                'scan_completed': self.scan_completed,
                'error': self.scan_error
            }
            
            # Print debug information
            logger.debug(f"Starting scan with options: {scan_options}")
            logger.debug(f"Data processor: {self.data_processor}")
            
            # Start scanning in a separate thread
            self.data_processor.start_scan(source_folder, scan_options, callbacks)
            
        except Exception as e:
            logger.error(f"Error starting scan: {e}")
            self.scan_error(f"Error starting scan: {str(e)}")
    
    def stop_scan(self):
        """Stop the scanning process"""
        try:
            logger.info("Stopping scan")
            
            # Stop the scan
            self.data_processor.stop_scanning()
            
            # Update UI
            self.scan_status.setText("Scan stopped by user")
            self.scan_button.setEnabled(True)
            self.stop_button.setEnabled(False)
            self.browse_button.setEnabled(True)
            
        except Exception as e:
            logger.error(f"Error stopping scan: {e}")
            QMessageBox.critical(self, "Error", 
                               f"Error stopping scan: {str(e)}")
    
    @pyqtSlot(int, int)
    def update_scan_progress(self, current, total):
        """Update the scan progress bar"""
        try:
            progress = int((current / max(total, 1)) * 100)
            self.scan_progress.setValue(progress)
            
            # Update status
            self.scan_status.setText(f"Scanning: {current} of {total} files ({progress}%)")
            
        except Exception as e:
            logger.error(f"Error updating progress: {e}")
    
    @pyqtSlot(object)
    def scan_completed(self, results):
        """Handle scan completion"""
        try:
            logger.info("Scan completed successfully")
            
            # Get the results
            file_count = len(results) if hasattr(results, "__len__") else 0
            
            # Update UI
            self.scan_status.setText(f"Scan completed: {file_count} files found")
            self.scan_button.setEnabled(True)
            self.stop_button.setEnabled(False)
            self.browse_button.setEnabled(True)
            
            # Switch to analyze tab
            self.tab_widget.setCurrentIndex(1)  # Analyze tab
            
            # Show success message
            QMessageBox.information(self, "Scan Complete", 
                                  f"Scan completed successfully. {file_count} files found.")
            
        except Exception as e:
            logger.error(f"Error handling scan completion: {e}")
            self.scan_error(f"Error handling scan completion: {str(e)}")
    
    @pyqtSlot(str)
    def scan_error(self, error_msg):
        """Handle scan error"""
        try:
            logger.error(f"Scan error: {error_msg}")
            
            # Update UI
            self.scan_status.setText(f"Error: {error_msg}")
            self.scan_button.setEnabled(True)
            self.stop_button.setEnabled(False)
            self.browse_button.setEnabled(True)
            
            # Show error message
            QMessageBox.critical(self, "Scan Error", 
                               f"Error during scan: {error_msg}")
            
        except Exception as e:
            logger.error(f"Error handling scan error: {e}")
            # If we can't show an error message, print to console as last resort
            print(f"ERROR: {str(e)}")